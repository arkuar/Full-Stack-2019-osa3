{"version":3,"sources":["services/persons.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObj","post","id","delete","put","Person","person","handleDelete","name","number","onClick","Filter","value","handleChange","onChange","PersonForm","submit","nameValue","numberValue","handleNameChange","handleNumberChange","onSubmit","required","type","Persons","persons","map","key","Notification","message","className","ReactDOM","render","useState","setPersons","newName","setNewName","newNumber","setNewNumber","filterStr","setNewFilter","notificationMsg","setNotificationMsg","notificationType","setNotificationType","useEffect","personService","initialPersons","notificationTimeout","setTimeout","personsToShow","filter","toUpperCase","includes","event","target","preventDefault","some","window","confirm","changedPerson","find","p","returnedPerson","catch","e","personObj","concat","document","getElementById"],"mappings":"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","file":"static/js/main.3f1b7ac9.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl).then(response => response.data)\n}\n\nconst create = newObj => {\n  return axios.post(baseUrl, newObj).then(response => response.data)\n}\n\nconst deletePerson = id => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newObj) => {\n  return axios.put(`${baseUrl}/${id}`, newObj).then(response => response.data)\n}\n\nexport default { getAll, create, deletePerson, update }\n","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport personService from './services/persons'\n\nconst Person = ({ person, handleDelete }) => <div>{person.name} {person.number} <button onClick={() => handleDelete(person)}>delete</button></div>\n\nconst Filter = ({ value, handleChange }) => <div>filter shown with <input value={value} onChange={handleChange} /></div>\n\nconst PersonForm = ({ submit, nameValue, numberValue, handleNameChange, handleNumberChange }) => {\n  return (\n    <form onSubmit={submit}>\n      <div>\n        name: <input value={nameValue} onChange={handleNameChange} required />\n      </div>\n      <div>\n        number: <input value={numberValue} onChange={handleNumberChange} required />\n      </div>\n      <div>\n        <button type='submit'>add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = ({ persons, handleDelete }) => <div>{persons.map(person => <Person key={person.name} person={person} handleDelete={handleDelete} />)}</div>\n\nconst Notification = ({ type, message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className={type} >\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterStr, setNewFilter] = useState('')\n  const [notificationMsg, setNotificationMsg] = useState(null)\n  const [notificationType, setNotificationType] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const notificationTimeout = () => {\n    setTimeout(() => {\n      setNotificationMsg(null)\n      setNotificationType(null)\n    }, 5000)\n  }\n\n  const addNumber = (event) => {\n    event.preventDefault()\n    if (persons.some(person => person.name.toUpperCase() === newName.toUpperCase())) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const person = persons.find(p => p.name.toUpperCase() === newName.toUpperCase())\n        const changedPerson = { ...person, number: newNumber }\n\n        personService\n          .update(changedPerson.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== changedPerson.id ? person : returnedPerson))\n            setNewName('')\n            setNewNumber('')\n            setNotificationMsg(`Updated ${returnedPerson.name}`)\n            setNotificationType('success')\n            notificationTimeout()\n          })\n          .catch(e => {\n            setNotificationMsg(`Information of ${changedPerson.name} has already been removed from server`)\n            setNotificationType('error')\n            setPersons(persons.filter(p => p.id !== changedPerson.id))\n            notificationTimeout()\n          })\n      }\n    } else {\n      const personObj = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(personObj)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setNotificationMsg(`Added ${personObj.name}`)\n          setNotificationType('success')\n          notificationTimeout()\n        })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const handleDelete = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .deletePerson(person.id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== person.id))\n          setNotificationMsg(`Deleted ${person.name}`)\n          setNotificationType('success')\n          notificationTimeout()\n        })\n    }\n  }\n\n  const personsToShow = filterStr ? persons.filter(person => person.name.toUpperCase().includes(filterStr.toUpperCase())) : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification type={notificationType} message={notificationMsg} />\n      <Filter value={filterStr} handleChange={handleFilterChange} />\n      <h3>Add a new</h3>\n      <PersonForm submit={addNumber}\n        nameValue={newName}\n        numberValue={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange} />\n      <h3>Numbers</h3>\n      <Persons persons={personsToShow} handleDelete={handleDelete} />\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}